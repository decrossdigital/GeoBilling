// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// USER & AUTHENTICATION
// ========================================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  clients       Client[]
  quotes        Quote[]
  invoices      Invoice[]
  contractors   Contractor[]
  settings      Setting[]
  serviceTemplates ServiceTemplate[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ========================================
// COMPANY & SETTINGS
// ========================================

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  category  String   // "company", "authentication", "payments", "email", "database"
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("settings")
}

// ========================================
// CLIENTS
// ========================================

model Client {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String?
  address     String?
  company     String?
  website     String?
  notes       String?  @db.Text
  status      String   @default("active") // "active", "inactive", "archived"
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quotes      Quote[]
  invoices    Invoice[]

  @@map("clients")
}

// ========================================
// CONTRACTORS
// ========================================

model Contractor {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String?
  address     String?
  skills      String[] // Array of skills (e.g., ["mixing", "mastering", "recording"])
  pricingType String   @default("hourly") // "hourly" or "flat"
  rate        Decimal  @db.Decimal(10, 2) // Rate (hourly or flat)
  currency    String   @default("USD")
  status      String   @default("active") // "active", "inactive", "archived"
  notes       String?  @db.Text
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quoteItems  QuoteItem[]
  invoiceItems InvoiceItem[]

  @@map("contractors")
}

// ========================================
// SERVICE TEMPLATES
// ========================================

model ServiceTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  category    String   // "recording", "mixing", "mastering", "production", "other"
  pricingType String   @default("flat") // "hourly" or "flat"
  rate        Decimal  @db.Decimal(10, 2)
  currency    String   @default("USD")
  isActive    Boolean  @default(true)
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  quoteItems  QuoteItem[]
  invoiceItems InvoiceItem[]

  @@map("service_templates")
}

// ========================================
// QUOTES
// ========================================

model Quote {
  id          String   @id @default(cuid())
  quoteNumber String   @unique
  title       String
  description String?  @db.Text
  project     String?
  projectDescription String? @db.Text
  status      String   @default("draft") // "draft", "sent", "accepted", "rejected", "expired"
  validUntil  DateTime
  subtotal    Decimal  @db.Decimal(10, 2)
  taxRate     Decimal  @db.Decimal(5, 2) @default(0)
  taxAmount   Decimal  @db.Decimal(10, 2) @default(0)
  total       Decimal  @db.Decimal(10, 2)
  currency    String   @default("USD")
  notes       String?  @db.Text
  terms       String?  @db.Text
  
  // Client Information
  clientId    String
  clientName  String
  clientEmail String
  clientPhone String?
  clientAddress String?
  
  // User Information
  userId      String
  userName    String
  userEmail   String
  userPhone   String?
  userAddress String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  items       QuoteItem[]
  invoices    Invoice[]

  @@map("quotes")
}

model QuoteItem {
  id              String   @id @default(cuid())
  quoteId         String
  serviceName     String
  description     String?  @db.Text
  quantity        Decimal  @db.Decimal(10, 2)
  unitPrice       Decimal  @db.Decimal(10, 2)
  total           Decimal  @db.Decimal(10, 2)
  taxable         Boolean  @default(false)
  contractorId    String?
  serviceTemplateId String?
  sortOrder       Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  quote           Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  contractor      Contractor? @relation(fields: [contractorId], references: [id])
  serviceTemplate ServiceTemplate? @relation(fields: [serviceTemplateId], references: [id])

  @@map("quote_items")
}

// ========================================
// INVOICES
// ========================================

model Invoice {
  id            String   @id @default(cuid())
  invoiceNumber String   @unique
  title         String
  description   String?  @db.Text
  status        String   @default("draft") // "draft", "sent", "paid", "overdue", "cancelled"
  issueDate     DateTime @default(now())
  dueDate       DateTime
  paidDate      DateTime?
  subtotal      Decimal  @db.Decimal(10, 2)
  taxRate       Decimal  @db.Decimal(5, 2) @default(0)
  taxAmount     Decimal  @db.Decimal(10, 2) @default(0)
  total         Decimal  @db.Decimal(10, 2)
  currency      String   @default("USD")
  notes         String?  @db.Text
  terms         String?  @db.Text
  
  // Payment Information
  paymentMethod String?  // "stripe", "paypal", "check", "cash"
  paymentReference String?
  
  // Client Information
  clientId      String
  clientName    String
  clientEmail   String
  clientPhone   String?
  clientAddress String?
  
  // User Information
  userId        String
  userName      String
  userEmail     String
  userPhone     String?
  userAddress   String?
  
  // Quote Reference
  quoteId       String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  client        Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  quote         Quote?   @relation(fields: [quoteId], references: [id])
  items         InvoiceItem[]
  payments      Payment[]

  @@map("invoices")
}

model InvoiceItem {
  id              String   @id @default(cuid())
  invoiceId       String
  serviceName     String
  description     String?  @db.Text
  quantity        Decimal  @db.Decimal(10, 2)
  unitPrice       Decimal  @db.Decimal(10, 2)
  total           Decimal  @db.Decimal(10, 2)
  taxable         Boolean  @default(false)
  contractorId    String?
  serviceTemplateId String?
  sortOrder       Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  invoice         Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  contractor      Contractor? @relation(fields: [contractorId], references: [id])
  serviceTemplate ServiceTemplate? @relation(fields: [serviceTemplateId], references: [id])

  @@map("invoice_items")
}

// ========================================
// PAYMENTS
// ========================================

model Payment {
  id              String   @id @default(cuid())
  invoiceId       String
  amount          Decimal  @db.Decimal(10, 2)
  currency        String   @default("USD")
  paymentMethod   String   // "stripe", "paypal", "check", "cash"
  paymentReference String?
  status          String   @default("pending") // "pending", "completed", "failed", "refunded"
  transactionId   String?  // External payment processor transaction ID
  processedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  invoice         Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// ========================================
// EMAIL LOGS
// ========================================

model EmailLog {
  id          String   @id @default(cuid())
  type        String   // "quote", "invoice", "payment_confirmation"
  recipient   String
  subject     String
  status      String   @default("sent") // "sent", "delivered", "failed", "bounced"
  messageId   String?  // External email service message ID
  error       String?  @db.Text
  metadata    Json?    // Additional data like quote/invoice ID
  createdAt   DateTime @default(now())

  @@map("email_logs")
}
